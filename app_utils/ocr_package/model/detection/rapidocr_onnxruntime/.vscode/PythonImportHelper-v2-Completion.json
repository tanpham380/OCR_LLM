[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "OrtInferSession",
        "importPath": "rapidocr_onnxruntime.utils",
        "description": "rapidocr_onnxruntime.utils",
        "isExtraImport": true,
        "detail": "rapidocr_onnxruntime.utils",
        "documentation": {}
    },
    {
        "label": "read_yaml",
        "importPath": "rapidocr_onnxruntime.utils",
        "description": "rapidocr_onnxruntime.utils",
        "isExtraImport": true,
        "detail": "rapidocr_onnxruntime.utils",
        "documentation": {}
    },
    {
        "label": "OrtInferSession",
        "importPath": "rapidocr_onnxruntime.utils",
        "description": "rapidocr_onnxruntime.utils",
        "isExtraImport": true,
        "detail": "rapidocr_onnxruntime.utils",
        "documentation": {}
    },
    {
        "label": "pyclipper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyclipper",
        "description": "pyclipper",
        "detail": "pyclipper",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "GraphOptimizationLevel",
        "importPath": "onnxruntime",
        "description": "onnxruntime",
        "isExtraImport": true,
        "detail": "onnxruntime",
        "documentation": {}
    },
    {
        "label": "InferenceSession",
        "importPath": "onnxruntime",
        "description": "onnxruntime",
        "isExtraImport": true,
        "detail": "onnxruntime",
        "documentation": {}
    },
    {
        "label": "SessionOptions",
        "importPath": "onnxruntime",
        "description": "onnxruntime",
        "isExtraImport": true,
        "detail": "onnxruntime",
        "documentation": {}
    },
    {
        "label": "get_available_providers",
        "importPath": "onnxruntime",
        "description": "onnxruntime",
        "isExtraImport": true,
        "detail": "onnxruntime",
        "documentation": {}
    },
    {
        "label": "get_device",
        "importPath": "onnxruntime",
        "description": "onnxruntime",
        "isExtraImport": true,
        "detail": "onnxruntime",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "UnidentifiedImageError",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "TextClassifier",
        "kind": 6,
        "importPath": "ch_ppocr_v2_cls.text_cls",
        "description": "ch_ppocr_v2_cls.text_cls",
        "peekOfCode": "class TextClassifier:\n    def __init__(self, config: Dict[str, Any]):\n        self.cls_image_shape = config[\"cls_image_shape\"]\n        self.cls_batch_num = config[\"cls_batch_num\"]\n        self.cls_thresh = config[\"cls_thresh\"]\n        self.postprocess_op = ClsPostProcess(config[\"label_list\"])\n        self.infer = OrtInferSession(config)\n    def __call__(\n        self, img_list: Union[np.ndarray, List[np.ndarray]]\n    ) -> Tuple[List[np.ndarray], List[List[Union[str, float]]], float]:",
        "detail": "ch_ppocr_v2_cls.text_cls",
        "documentation": {}
    },
    {
        "label": "ClsPostProcess",
        "kind": 6,
        "importPath": "ch_ppocr_v2_cls.utils",
        "description": "ch_ppocr_v2_cls.utils",
        "peekOfCode": "class ClsPostProcess:\n    def __init__(self, label_list: List[str]):\n        self.label_list = label_list\n    def __call__(self, preds: np.ndarray) -> List[Tuple[str, float]]:\n        pred_idxs = preds.argmax(axis=1)\n        decode_out = [\n            (self.label_list[idx], preds[i, idx]) for i, idx in enumerate(pred_idxs)\n        ]\n        return decode_out",
        "detail": "ch_ppocr_v2_cls.utils",
        "documentation": {}
    },
    {
        "label": "TextDetector",
        "kind": 6,
        "importPath": "ch_ppocr_v3_det.text_detect",
        "description": "ch_ppocr_v3_det.text_detect",
        "peekOfCode": "class TextDetector:\n    def __init__(self, config: Dict[str, Any]):\n        limit_side_len = config.get(\"limit_side_len\", 736)\n        limit_type = config.get(\"limit_type\", \"min\")\n        self.preprocess_op = DetPreProcess(limit_side_len, limit_type)\n        post_process = {\n            \"thresh\": config.get(\"thresh\", 0.3),\n            \"box_thresh\": config.get(\"box_thresh\", 0.5),\n            \"max_candidates\": config.get(\"max_candidates\", 1000),\n            \"unclip_ratio\": config.get(\"unclip_ratio\", 1.6),",
        "detail": "ch_ppocr_v3_det.text_detect",
        "documentation": {}
    },
    {
        "label": "DetPreProcess",
        "kind": 6,
        "importPath": "ch_ppocr_v3_det.utils",
        "description": "ch_ppocr_v3_det.utils",
        "peekOfCode": "class DetPreProcess:\n    def __init__(self, limit_side_len: int = 736, limit_type: str = \"min\"):\n        self.mean = np.array([0.485, 0.456, 0.406])\n        self.std = np.array([0.229, 0.224, 0.225])\n        self.scale = 1 / 255.0\n        self.limit_side_len = limit_side_len\n        self.limit_type = limit_type\n    def __call__(self, img: np.ndarray) -> Optional[np.ndarray]:\n        resized_img = self.resize(img)\n        if resized_img is None:",
        "detail": "ch_ppocr_v3_det.utils",
        "documentation": {}
    },
    {
        "label": "ResizeImgError",
        "kind": 6,
        "importPath": "ch_ppocr_v3_det.utils",
        "description": "ch_ppocr_v3_det.utils",
        "peekOfCode": "class ResizeImgError(Exception):\n    pass\nclass DBPostProcess:\n    \"\"\"The post process for Differentiable Binarization (DB).\"\"\"\n    def __init__(\n        self,\n        thresh: float = 0.3,\n        box_thresh: float = 0.7,\n        max_candidates: int = 1000,\n        unclip_ratio: float = 2.0,",
        "detail": "ch_ppocr_v3_det.utils",
        "documentation": {}
    },
    {
        "label": "DBPostProcess",
        "kind": 6,
        "importPath": "ch_ppocr_v3_det.utils",
        "description": "ch_ppocr_v3_det.utils",
        "peekOfCode": "class DBPostProcess:\n    \"\"\"The post process for Differentiable Binarization (DB).\"\"\"\n    def __init__(\n        self,\n        thresh: float = 0.3,\n        box_thresh: float = 0.7,\n        max_candidates: int = 1000,\n        unclip_ratio: float = 2.0,\n        score_mode: str = \"fast\",\n        use_dilation: bool = False,",
        "detail": "ch_ppocr_v3_det.utils",
        "documentation": {}
    },
    {
        "label": "EP",
        "kind": 6,
        "importPath": "utils.infer_engine",
        "description": "utils.infer_engine",
        "peekOfCode": "class EP(Enum):\n    CPU_EP = \"CPUExecutionProvider\"\n    CUDA_EP = \"CUDAExecutionProvider\"\n    DIRECTML_EP = \"DmlExecutionProvider\"\nclass OrtInferSession:\n    def __init__(self, config: Dict[str, Any]):\n        self.logger = get_logger(\"OrtInferSession\")\n        model_path = config.get(\"model_path\", None)\n        self._verify_model(model_path)\n        self.cfg_use_cuda = config.get(\"use_cuda\", None)",
        "detail": "utils.infer_engine",
        "documentation": {}
    },
    {
        "label": "OrtInferSession",
        "kind": 6,
        "importPath": "utils.infer_engine",
        "description": "utils.infer_engine",
        "peekOfCode": "class OrtInferSession:\n    def __init__(self, config: Dict[str, Any]):\n        self.logger = get_logger(\"OrtInferSession\")\n        model_path = config.get(\"model_path\", None)\n        self._verify_model(model_path)\n        self.cfg_use_cuda = config.get(\"use_cuda\", None)\n        self.cfg_use_dml = config.get(\"use_dml\", None)\n        self.had_providers: List[str] = get_available_providers()\n        EP_list = self._get_ep_list()\n        sess_opt = self._init_sess_opts(config)",
        "detail": "utils.infer_engine",
        "documentation": {}
    },
    {
        "label": "ONNXRuntimeError",
        "kind": 6,
        "importPath": "utils.infer_engine",
        "description": "utils.infer_engine",
        "peekOfCode": "class ONNXRuntimeError(Exception):\n    pass",
        "detail": "utils.infer_engine",
        "documentation": {}
    },
    {
        "label": "LoadImage",
        "kind": 6,
        "importPath": "utils.load_image",
        "description": "utils.load_image",
        "peekOfCode": "class LoadImage:\n    def __init__(self):\n        pass\n    def __call__(self, img: InputType) -> np.ndarray:\n        if not isinstance(img, InputType.__args__):\n            raise LoadImageError(\n                f\"The img type {type(img)} does not in {InputType.__args__}\"\n            )\n        origin_img_type = type(img)\n        img = self.load_img(img)",
        "detail": "utils.load_image",
        "documentation": {}
    },
    {
        "label": "LoadImageError",
        "kind": 6,
        "importPath": "utils.load_image",
        "description": "utils.load_image",
        "peekOfCode": "class LoadImageError(Exception):\n    pass",
        "detail": "utils.load_image",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "utils.load_image",
        "description": "utils.load_image",
        "peekOfCode": "root_dir = Path(__file__).resolve().parent\nInputType = Union[str, np.ndarray, bytes, Path, Image.Image]\nclass LoadImage:\n    def __init__(self):\n        pass\n    def __call__(self, img: InputType) -> np.ndarray:\n        if not isinstance(img, InputType.__args__):\n            raise LoadImageError(\n                f\"The img type {type(img)} does not in {InputType.__args__}\"\n            )",
        "detail": "utils.load_image",
        "documentation": {}
    },
    {
        "label": "InputType",
        "kind": 5,
        "importPath": "utils.load_image",
        "description": "utils.load_image",
        "peekOfCode": "InputType = Union[str, np.ndarray, bytes, Path, Image.Image]\nclass LoadImage:\n    def __init__(self):\n        pass\n    def __call__(self, img: InputType) -> np.ndarray:\n        if not isinstance(img, InputType.__args__):\n            raise LoadImageError(\n                f\"The img type {type(img)} does not in {InputType.__args__}\"\n            )\n        origin_img_type = type(img)",
        "detail": "utils.load_image",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "utils.logger",
        "description": "utils.logger",
        "peekOfCode": "def get_logger(name: str) -> logging.Logger:\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    fmt = \"%(asctime)s - %(name)s - %(levelname)s: %(message)s\"\n    format_str = logging.Formatter(fmt)\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.DEBUG)\n    logger.addHandler(sh)\n    sh.setFormatter(format_str)\n    return logger",
        "detail": "utils.logger",
        "documentation": {}
    },
    {
        "label": "UpdateParameters",
        "kind": 6,
        "importPath": "utils.parse_parameters",
        "description": "utils.parse_parameters",
        "peekOfCode": "class UpdateParameters:\n    def __init__(self) -> None:\n        pass\n    def parse_kwargs(self, **kwargs):\n        global_dict, det_dict, cls_dict, rec_dict = {}, {}, {}, {}\n        for k, v in kwargs.items():\n            if k.startswith(\"det\"):\n                k = k.split(\"det_\")[1]\n                if k == \"donot_use_dilation\":\n                    k = \"use_dilation\"",
        "detail": "utils.parse_parameters",
        "documentation": {}
    },
    {
        "label": "update_model_path",
        "kind": 2,
        "importPath": "utils.parse_parameters",
        "description": "utils.parse_parameters",
        "peekOfCode": "def update_model_path(config: Dict[str, Any]) -> Dict[str, Any]:\n    key = \"model_path\"\n    config[\"Det\"][key] = str(root_dir / config[\"Det\"][key])\n    config[\"Rec\"][key] = str(root_dir / config[\"Rec\"][key])\n    config[\"Cls\"][key] = str(root_dir / config[\"Cls\"][key])\n    return config\ndef init_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-img\", \"--img_path\", type=str, default=None, required=True)\n    parser.add_argument(\"-p\", \"--print_cost\", action=\"store_true\", default=False)",
        "detail": "utils.parse_parameters",
        "documentation": {}
    },
    {
        "label": "init_args",
        "kind": 2,
        "importPath": "utils.parse_parameters",
        "description": "utils.parse_parameters",
        "peekOfCode": "def init_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-img\", \"--img_path\", type=str, default=None, required=True)\n    parser.add_argument(\"-p\", \"--print_cost\", action=\"store_true\", default=False)\n    global_group = parser.add_argument_group(title=\"Global\")\n    global_group.add_argument(\"--text_score\", type=float, default=0.5)\n    global_group.add_argument(\"--no_det\", action=\"store_true\", default=False)\n    global_group.add_argument(\"--no_cls\", action=\"store_true\", default=False)\n    global_group.add_argument(\"--no_rec\", action=\"store_true\", default=False)\n    global_group.add_argument(\"--print_verbose\", action=\"store_true\", default=False)",
        "detail": "utils.parse_parameters",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "utils.parse_parameters",
        "description": "utils.parse_parameters",
        "peekOfCode": "root_dir = Path(__file__).resolve().parent.parent\nInputType = Union[str, np.ndarray, bytes, Path, Image.Image]\ndef update_model_path(config: Dict[str, Any]) -> Dict[str, Any]:\n    key = \"model_path\"\n    config[\"Det\"][key] = str(root_dir / config[\"Det\"][key])\n    config[\"Rec\"][key] = str(root_dir / config[\"Rec\"][key])\n    config[\"Cls\"][key] = str(root_dir / config[\"Cls\"][key])\n    return config\ndef init_args():\n    parser = argparse.ArgumentParser()",
        "detail": "utils.parse_parameters",
        "documentation": {}
    },
    {
        "label": "InputType",
        "kind": 5,
        "importPath": "utils.parse_parameters",
        "description": "utils.parse_parameters",
        "peekOfCode": "InputType = Union[str, np.ndarray, bytes, Path, Image.Image]\ndef update_model_path(config: Dict[str, Any]) -> Dict[str, Any]:\n    key = \"model_path\"\n    config[\"Det\"][key] = str(root_dir / config[\"Det\"][key])\n    config[\"Rec\"][key] = str(root_dir / config[\"Rec\"][key])\n    config[\"Cls\"][key] = str(root_dir / config[\"Cls\"][key])\n    return config\ndef init_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-img\", \"--img_path\", type=str, default=None, required=True)",
        "detail": "utils.parse_parameters",
        "documentation": {}
    },
    {
        "label": "VisRes",
        "kind": 6,
        "importPath": "utils.vis_res",
        "description": "utils.vis_res",
        "peekOfCode": "class VisRes:\n    def __init__(self, text_score: float = 0.5):\n        self.text_score = text_score\n        self.load_img = LoadImage()\n    def __call__(\n        self,\n        img_content: InputType,\n        dt_boxes: np.ndarray,\n        txts: Optional[Union[List[str], Tuple[str]]] = None,\n        scores: Optional[Tuple[float]] = None,",
        "detail": "utils.vis_res",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "utils.vis_res",
        "description": "utils.vis_res",
        "peekOfCode": "root_dir = Path(__file__).resolve().parent\nInputType = Union[str, np.ndarray, bytes, Path, Image.Image]\nclass VisRes:\n    def __init__(self, text_score: float = 0.5):\n        self.text_score = text_score\n        self.load_img = LoadImage()\n    def __call__(\n        self,\n        img_content: InputType,\n        dt_boxes: np.ndarray,",
        "detail": "utils.vis_res",
        "documentation": {}
    },
    {
        "label": "InputType",
        "kind": 5,
        "importPath": "utils.vis_res",
        "description": "utils.vis_res",
        "peekOfCode": "InputType = Union[str, np.ndarray, bytes, Path, Image.Image]\nclass VisRes:\n    def __init__(self, text_score: float = 0.5):\n        self.text_score = text_score\n        self.load_img = LoadImage()\n    def __call__(\n        self,\n        img_content: InputType,\n        dt_boxes: np.ndarray,\n        txts: Optional[Union[List[str], Tuple[str]]] = None,",
        "detail": "utils.vis_res",
        "documentation": {}
    },
    {
        "label": "RapidOCR",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class RapidOCR:\n    def __init__(self, config_path: Optional[str] = None, **kwargs):\n        config = read_yaml(DEFAULT_CFG_PATH)\n        config = update_model_path(config)\n        if config_path is not None and Path(config_path).exists:\n            config = read_yaml(config_path)\n        if kwargs:\n            updater = UpdateParameters()\n            config = updater(config, **kwargs)\n        global_config = config[\"Global\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "root_dir = Path(__file__).resolve().parent\nDEFAULT_CFG_PATH = root_dir / \"config.yaml\"\nlogger = get_logger(\"RapidOCR\")\nclass RapidOCR:\n    def __init__(self, config_path: Optional[str] = None, **kwargs):\n        config = read_yaml(DEFAULT_CFG_PATH)\n        config = update_model_path(config)\n        if config_path is not None and Path(config_path).exists:\n            config = read_yaml(config_path)\n        if kwargs:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CFG_PATH",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DEFAULT_CFG_PATH = root_dir / \"config.yaml\"\nlogger = get_logger(\"RapidOCR\")\nclass RapidOCR:\n    def __init__(self, config_path: Optional[str] = None, **kwargs):\n        config = read_yaml(DEFAULT_CFG_PATH)\n        config = update_model_path(config)\n        if config_path is not None and Path(config_path).exists:\n            config = read_yaml(config_path)\n        if kwargs:\n            updater = UpdateParameters()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = get_logger(\"RapidOCR\")\nclass RapidOCR:\n    def __init__(self, config_path: Optional[str] = None, **kwargs):\n        config = read_yaml(DEFAULT_CFG_PATH)\n        config = update_model_path(config)\n        if config_path is not None and Path(config_path).exists:\n            config = read_yaml(config_path)\n        if kwargs:\n            updater = UpdateParameters()\n            config = updater(config, **kwargs)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "engine = RapidOCR()\nimage_path = \"test.jpg\"\na = engine(image_path)\nprint(a)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "image_path = \"test.jpg\"\na = engine(image_path)\nprint(a)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "a = engine(image_path)\nprint(a)",
        "detail": "main",
        "documentation": {}
    }
]